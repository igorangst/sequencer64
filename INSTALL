INSTALL for Sequencer64 v. 0.95.0 and above
Chris Ahlstrom
2015-09-10 to 2018-06-02

The current packaging for Sequencer64 requires building the code.  The
bootstrapping setup is primarily aimed at developers.  Starting with version
0.90.4, four different versions of the program can be built:

    -   seq64. Native JACK; the default build after a simple bootstrap.
        command; JACK MIDI with optional JACK transport; fall-back to ALSA;
        Better support for Meta events (specifically Set Tempo and Time
        Signature).  Now the most official version of Sequencer64.  Also
        builds a test application, midiclocker64.
    -   seq64cli.  An in-progress version of a GUI-less version of
        Sequencer64, which can run from the console or as a daemon.  Also
        builds a test application, midiclocker64.
    -   sequencer64. ALSA with JACK transport; the original version.
    -   seq64portmidi. PortMIDI implementation; has issues, a less effective
        option for Linux.
    -   qpseq64.  The PortMidi version of the application, with a Qt5
        user interface based on Kepler34.  Useable, but still lacks many of
        the user-interface elements of the Gtkmm 2.4 application.  Built via
        qmake and suitable for loading in QtCreator installed with its mingw32
        tools.  If you want to build it yourself, be sure to specify the Mingw
        library, tools, and mkspec in Qt Creator.  This version supports both
        Linux and (wait for it...) Windows.

    We provide a portable Windows Zip package and a Windows installer in
    the "sequencer64-packages" project in GitHub.

Below are sections for various ways of installing this project by building
from source code:

    -   Quick Install
    -   Advanced Steps
    -   Qmake-based Install

Quick Install:

    The quick install is meant for for those who do no want to install a lot
    of extra developer packages, and want to use the standard "./configure ;
    make ; make install" mantra.  These steps build the default version of
    Sequencer64, "seq64".

    The "configure" script for the normal build process means you will need to
    make sure various "dev" dependencies are installed.  See the DEPENDENCIES
    section.  In addition, there may be a need to do the following commands,
    which require automake and libtool to be installed:

        $ libtoolize
        $ automake --add-missing

    Grab a Sequencer64 tarball e.g. sequencer64-master-rtmidi-0.94.6-1.tar.xz.
    Untar it

        $ ./configure --enable-release --enable-rtmidi
        $ make
        $ sudo make install

    The configure "--enable-release --enable-rtmidi" options are optional,
    since they are the defaults.  This build results in the first executable
    described above, seq64, the same setup created by "./bootstrap -er -rm".

    If any issues occur, please write me through GitHub, or directly at my
    Gmail address.

Advanced Steps:

    These steps are meant for those who want to try the various versions of
    Sequencer64, and do not mind install a lot of extra developer software.

   0.  Preload any DEPENDENCIES, as listed at the end of this document.
       However, if some are missing, the configure script will tell you,
       or, at worst, a build error will tell you.

   1.  Check-out the branch you want, if you do not want "master".  Make a
       branch if you want to make changes.  The active branches are "master",
       "tempo_track", and "qt5-support".  The comand "git branch -a" will
       show other branches not yet deleted.  See GitHub.

   2.  The first thing to do is decide what version of Sequencer64 you want to
       build.  There are now 5 versions:

       1.   Seq64rtmidi/seq64:           ./bootstrap [ -er | -ed] -rm
       2.   Seq64cli/seq64cli:           ./bootstrap -er -cli
       3.   Sequencer64/sequencer64:     ./bootstrap -er -am
       4.   Seq64portmidi/seq64portmidi: ./bootstrap -er -pm (fewer features)
       5.   Seq64qt5/qseq64:             ./bootstrap -er -qt (in progress)
   
       From the top project directory, run one of the commands above (they
       auto-configure) or run the following commands, which set up a release
       build of seq64 (native JACK, native ALSA fallback).

       $ ./bootstrap    (needed only if the configure script does not exist)
       $ ./configure

       If you do not want to see a lot of output, the stock autotools
       option "--enable-silent-rules" can be added to the ./configure command.

       For building in release mode without seeing a ton of compiler output,
       the following command will configure for the "silent rules" of Automake.

       $ ./bootstrap --enable-release [ -rm | -cli | -am | -pm ]
       $ ./bootstrap -er [ -rm | -cli | -am | -pm ]

       Note that the options in brackets are option and mutually exclusive.
       The additional options select the kind of Sequencer64 to build.
       There is now no default, but -rm is most likely what you want.

       For debugging without libtool getting in the way, just run the
       following command, which will add the --enable-debug and
       --disable-shared options to a configure run:

       $ ./bootstrap --enable-debug [ -rm | -cli | -am | -pm ]
       $ ./bootstrap -ed [ -rm | -cli | -am | -pm ]

       If desired, there are also configure options as described below,
       and also conditional macros in the code.  The configure options can be 
       supplied to the ./configure command, while build macros can be defined
       (in the code) to even further tailor the build.

   3.  Run the make command:

       $ make

       This procedure no longer builds the documentation. If you do care about
       programmer documentation, change to the doc/dox directory and run
       "./make_dox reference" and "./make_dox notes".

       WARNING:  "./make_dox reference" is currently BROKEN, even though
                 no errors/warnings are shown in the Doxygen log files.
      
       Do not forget that you can add options to "make", such as "V=0" (enable
       silent build), "V=1" (enable the normal verbose build), and "-j n" (use
       n processors to speed up the build).

   4.  To install, become root and run:

       # make install

       Note that we have removed the developer reference manual from the
       automated build (see the Doxygen DEPENDENCIES below), but the existing
       documents will still be installed.

   5.  See the additional features that can be enabled, below, using 
       build macros.

   6.  Also grab the Sequencer64 User Manual from:

            http://github.com/ahlstromcj/sequencer64-doc.git

       It contains a prebuilt PDF version of the manual, as well as the
       LaTeX files needed to rebuild it.

   7.  If you want to generate your own source/configure tarball for
       distributing Sequencer64, use the pack script:

       ./pack --release rtmidi 0.94.6

       where rtmidi is the intended default build, and 0.94.6 is the version
       of the project.  The branch is included in the resulting tarball name;
       the usual branch would be "master".

Qmake-based Install:

    A build based on Qt Creator and Qmake is available.  It has the sole
    purpose of making it easy to build the project on Windows, though we
    created this build on Linux first to work out the numerous "gotchas" with
    Qt Creator, QMake, and the internal Sequencer64 "architecture".
    
    The Qmake-based build is designed *only* to use the PortMidi
    library and the new Kepler34-based Qt 5 user interface.  This
    user interface is currently less functional than the Gtkmm 2.4 user
    interface, but the Sequencer64 libraries are used internally.

    The first way to use this build is to run qtcreator and load the
    qplseq64.pro file.  This method can be used if you do not care for the
    command-line.  However, if the installer for Qt Creator did not
    set up the default "kit" properly, you must create a good kit manually.
    If the kit is set up properly, the "qplseq64.pro" entry in the left
    project panel will show the other "pro" files as subprojects.  Note that
    a successful build will put the generated files in a "shadow" directory
    parallel with the "sequencer64" directory, such as:
    
        build-qplseq64-Desktop_Qt_5_10_1_MinGW_32bit-Debug
    
    Do not forget to "Configure Project" before trying to build it!

    The second way to use this build is to just use qmake to do a "shadow
    build".  Assuming you are in the "sequencer64" directory:

        $ cd ..
        $ mkdir debug-build
        $ cd debug-build
        $ qmake -makefile -recursive "CONFIG += debug" ../sequencer64/qplseq64.pro
        $ make
        $ sudo make install (does not work yet!)
        $ gdb ./Seq64qt/qplseq64 (for debugging)

    One can also use "CONFIG += release", or just leave that off entirely.

    Our aim is to get a nice static build that works under Linux or Windows.
    Currently, we have tried only using the "mingw" tools in Windows, not the
    "msvc" (Microsoft) tools.  For debugging, gdb can be used, but QtCreator
    is an easier debugging interface.

CONFIGURE OPTIONS FOR APPLICATION FEATURES:

    These options undefine the following build macros:

        SEQ64_RTMIDI_SUPPORT
        SEQ64_ALSAMIDI_SUPPORT
        SEQ64_PORTMIDI_SUPPORT
        SEQ64_HIGHLIGHT_EMPTY_SEQS
        SEQ64_LASH_SUPPORT
        SEQ64_JACK_SUPPORT
        SEQ64_JACK_SESSION
        SEQ64_PAUSE_SUPPORT
        SEQ64_STAZED_CHORD_GENERATOR
        SEQ64_STAZED_TRANSPOSE
        SEQ64_JE_PATTERN_PANEL_SCROLLBARS
        SEQ64_MULTI_MAINWID

    --enable-rtmidi

        Defines SEQ64_RTMIDI_SUPPORT to enable our heavily modified "rtmidi"
        library.  This option enables the usage of native JACK MIDI which will
        fall back to ALSA if JACK is not running.  Builds Seq64rtmidi/seq64.

    --enable-alsamidi --disable-rtmidi

        Defines SEQ64_ALSAMIDI_SUPPORT to build the original Sequencer64.
        This build is not quite the same, since we have refactored the midibus
        and mastermidibus modules, and added the businfo module.  Builds
        Sequencer64/sequencer64.  Note that "rtmidi" must be explicitly
        disabled at this time.

    --enable-portmidi --disable-rtmidi

        Defines SEQ64_PORTMIDI_SUPPORT to build the PortMIDI version of
        Sequencer64, using the Linux version of this library.  Builds
        Seq64portmidi/seq64portmidi.  We have tested only playback.  When we
        eventually get to Windows MIDI support, we have to decide whether to
        use the "portmidi" build or to use the "rtmidi" build.  Note that
        "rtmidi" must be explicitly disabled at this time.
        
    --disable-highlight

        Undefines the SEQ64_HIGHLIGHT_EMPTY_SEQS  macro, which is otherwise
        defined by default.  If defined, the application will highlight empty
        sequences/patterns by coloring them yellow.

    --enable-lash

        Defines the SEQ64_LASH_SUPPORT macro, which is now undefined
        by default.  Use this if you still use LASH session management.

    --disable-jack
    
        Undefines the SEQ64_JACK_SUPPORT macro, which is otherwise defined
        by default.  This option is not viable for the "rtmidi" version of
        Sequencer64, which incorporates a couple of JACK modules.

    --disable-jack-session

        Undefines the SEQ64_JACK_SESSION macro, which is defined if JACK
        support is defined, and the jack/session.h file is found.

    --disable-pause

        Undefines the SEQ64_PAUSE_SUPPORT macro.  If this macro is defined,
        then the application is built with support for a Pause button.  It
        used to control the addition of pause functionality, but that
        functionality is now permanent..  This means that, in ALSA mode, the
        progress bars stay in place when Pause is activated (by click or
        keystroke), and playback resumes where it left off.  The Stop button
        still rewinds to the beginning.  The behavior of JACK transport, if
        enabled, is (should be!) unchanged.  To go back to the legacy
        stop/play behavior, use the --disable-pause option when running the
        configure script.  Note that we are still working through issues with
        the pause option, and there are a lot of situations to test.

    --disable-chords

        Undefines the SEQ64_STAZED_CHORD_GENERATOR macro.  If this macro is
        defined, then the application is built with support for a Chord button
        in the pattern editor, which enables entering whole chords with a
        single click.  This feature is grabbed from
        https://github.com/Stazed/seq32.

    --disable-transpose

        Undefines the SEQ64_STAZED_TRANSPOSE macro.  If this macro is defined,
        then the application is built with support for transpose buttons in
        the pattern and song editors, which enable transposing whole songs, or
        just sequences that are marked as transposable.  This feature is
        grabbed from https://github.com/Stazed/seq32.  It does not affect the
        ability to select notes and transpose them individually.  It does
        affect Aftertouch events.  Not yet supported in the Qt user-interface.

    --disable-seq32jack (obsolete, removed)

        The code that used to be marked with the SEQ64_STAZED_JACK_SUPPORT
        macro is now permanent.  It enables Seq32 JACK handling, which
        incorporates many improvements to JACK transport, including the MIDI
        clock fix from Seq24 v. 0.9.3.  It is now working pretty well, and
        probably the best option now.

    --disable-lfo

        Undefines the SEQ64_STAZED_LFO_SUPPORT macro, which is now defined by
        default.  When enable, the pattern editor includes an "LFO" button
        that brings up a small window to allow for the modulation of event
        data (in the data pane) by simple periodic waveforms.  This feature
        was adopted and improved from the Seq32 project.

    --enable-portmidi
    --enable-rtmidi
    --enable-alsamidi

        We have gotten a few alternate implementations to work.  The normal
        build is effectively --enable-rtmidi.  The --enable-portmidi flag
        creates a new application, seq64portmidi, that is based on using ALSA
        on Linux via the PortMidi application.  If we get a nice
        implementation of gtkmm2 for Windows working, we ought to have the
        Windows version we were looking at.  The macros are:

        SEQ64_PORTMIDI_SUPPORT
        SEQ64_RTMIDI_SUPPORT

        They are used only in the --version output.

    --disable-mainscroll

        Undefines SEQ64_JE_PATTERN_PANEL_SCROLLBARS.  This macro enables
        a new scroll-bar feature in the main window, from user jean-emmanuel,
        in preparation for a larger number of patterns in the main window.

    --disable-multiwid

        Undefines SEQ64_MULTI_MAINWID.  This macro enables showing multiple
        main window sets in up to a 3-row by 2-column matrix, with Set
        spinners for each windows, or one for the whole group.  This option
        is not perfect, but can be useful.

MANUALLY-DEFINED MACROS IN CODE:

    The following items are not yet part of the configure script, but can
    be edited manually to achieve the desired settings.  Only crazy or
    experiment-happy people will normally want to change the define-state of
    these macros.  We have consolidated them into a single file,
    libseq64/include/seq64_features.h, to make them easier to find and edit.

    SEQ64_SHOW_COLOR_PALETTE:

        If enabled (will be the default), this feature allows the user to pick
        a color for each sequence, to make it more distinguishable.  The
        default color is NONE (a white color) that is not stored in the track.
        Otherwise, this color is saved in a SeqSpec associated with the track.
        This differs from the Kepler34 implementation, which stores 1024
        color values no matter what.

    SEQ64_SONG_BOX_SELECT:

        This feature is meant to become a permanent part of Sequencer64
        eventually.  If defined, it allows selecting multiple patterns in the
        Song editor.  Currently, this can be done by selecting a pattern, then
        holding the Shift key while selecting more patterns.  Eventually,
        the ability to box-select mutliple patterns, like Kepler34, will be
        added.  However, this will be a long time in coming, as I have churned
        a lot trying to get it to work.  However, it is available if
        building for Qt support (i.e. SEQ64_QTMIDI_SUPPORT is defined).

    SEQ64_STAZED_EXPAND_RECORD:     (now a permanent, unmacroed feature)

        This macro, now permanent, turns on the ability to specify
        different behavior in recording.  Normally, when a pattern loops to
        the beginning, and new events are received, then these new events are
        added to the events already there.  If this macro is defined, then
        the seqedit window provides a record modification button which lets
        the user select "Overwrite", which deletes the events in the pattern
        at the beginning of the loop, and "Expand", which adds measures to the
        pattern as the progress of recording moves forward.

    SEQ64_EDIT_SEQUENCE_HIGHLIGHT:

        Provides the option to highlight the currently-editing sequence
        in the main window view and in the song editor.  If the sequence is
        muted, it is highlighted in black text on a cyan background.  If
        it is unmuted, it is highlighted in cyan text on a black background.
        The highlighting follows whichever pattern editor or event editor has
        the focus.

    SEQ64_HANDLE_TIMESIG_AND_TEMPO:

        OBSOLETE:  It is now a permanent option, unchangeable.

        Provides a new option to save the Time Signature and Tempo data
        that may be present in a MIDI file (in the first track) in the
        sequence object, and write them back to the MIDI file when saved
        again, in Sequencer64 format.  The SeqSpec events that Seq24 and
        Sequencer64 save for these "events" are not readable by other MIDI
        applications, such as QTractor.  By enabling this macro, other
        sequencers can read the correct time-signature and tempo values from
        Sequencer64 MIDI files.

    SEQ64_USE_NEW_FONT:

        OBSOLETE:  now a run-time option that can be changed in the
        user-settings ("user") configuration file.

        Already defined in the font module.  If defined, a new, anti-aliased,
        bold font is used in the user-interface.  This new font is implemented
        in new XPM files in resources/pixmaps directory: wen*.xpm.  The font
        is slightly larger, but changes the user-interface sizes only to an
        infinitesmal degree.  Using this new font is the default.

    SEQ64_USE_EVENT_MAP:

        Was defined in the seq64_features.h module.  It enables the usage of an
        std::multimap, instead of an std::list, to store MIDI events.  Because
        the code does a lot of sorting of events, using the std::multimap is
        actually a lot faster (especially under debug mode, where it takes
        many seconds for a medium-size MIDI file to load using the std::list
        implementation).

        There is still a chance that the std::multimap might prove the
        limiting factor during playback. And, in fact, we found that for
        the large MIDI file, contrib/midi/b4uacuse-stress.midi, on our slow
        single-core test machine, the amount of data was simply unplayable.
        So now the std::list implementation is back in usage, but with a
        difference.  When loading the MIDI file, no sorting is done until
        all of the events have been added to a sequence.  This make the
        loading process as fast as the std::multimap, but with a much better
        throughput for playback.

        We will eventually consider replacing std::list with std::vector
        for even better throughput; the former still has node pointers to deal
        with, which slows simple iteration down.  There are many
        complications, though.

    SEQ64_USE_EVENTEDIT_MAP:

        For the event editor (editable_events, etc.), this macro replaces the
        std::list with std::multimap.

    SEQ64_PRESORT_EVENT_CONTAINER (obsolete):

        If using the std::list MIDI implementation (from Seq24), also
        sort the MIDI event container after every event is inserted, even
        when reading a MIDI file.  This greatly slows down the reading
        of large MIDI files, though; our largest file then takes on the order
        of 10 minutes to load!  So this option is a fallback in case bugs are
        found related to NOT using SEQ64_USE_EVENT_MAP, but delaying sorting
        until all sequence events have been loaded.

    SEQ64_USE_MIDI_VECTOR:

        Defined and used in the midifile module.  It provides the preferred
        alternative to the list for storing and counting the bytes of MIDI
        data.  It is an attempt to stop reversing certain events due to the
        peculiarities of using std::list to store MIDI bytes from a sequence.
        This new implementation uses std::vector and does not use pop_back()
        to retrieve the bytes for writing to a file.

    SEQ64_SOLID_PIANOROLL_GRID:

        Enabling this macro makes the grid lines for the piano rolls
        more solid, with about the same perception of lightness.
        It also calls in some other tweaks, such as the positioning of
        markers.  We currently like this look a little better, and so it is
        the default.  See the app_limits.h header file for the definition of
        this variable.

    SEQ64_FOLLOW_PROGRESS_BAR:

        Currently enabled by default in the seqroll.cpp module, this macro
        turns on code that scrolls the sequence/pattern editor horizontally to
        keep the progress bar in view for long patterns, as the tune plays.
        It currently has the following issue:

            -   Tracking when controlled by the Song Mode, with a gap in the
                pattern triggering, causes the alignment of paging and
                progress to get out of whack.

    SEQ64_STAZED_EXPORT_SONG:

        Enables suppport for exporting a Sequencer64 song with performance
        (Song Editor) data as a standard MIDI file (format 1).  Enabled in the
        code (midifile.hpp).

    SEQ64_STAZED_EDIT_MENU:

        Enables a new Edit menu, used for accessing features such as
        whole-song transposition and exporting performances to normal MIDI
        files.

        Obsolete:  Now a permanent, unmacroed feature.

    SEQ64_STAZED_SONG_MODE_BUTTON:

        Enables a Live/Song-mode toggle-button on the main window, so
        that one can choose the mode directly, rather than focussing the
        main window versus the song-editor window.  Comes from the Seq32
        project.

    SEQ64_STAZED_LFO_SUPPORT:

        Enables a provisional windows to allow adding low-frequency modulation
        to the pattern editor data panel.

    SEQ64_USE_DEBUG_OUTPUT:

        Enable this macro in the globals.h header file, to see extra console
        output if the application is compiled for debugging.  This macro
        can be activated only if PLATFORM_DEBUG is defined, which is taken
        care of by the build process.  If set, this macro turns on extra
        (i.e. too much) console output for the following modules:

            globals
            jack_assistant
            optionsfile
            user_settings
            And more...

    SEQ64_TOGGLE_PLAYING:

        This is now a PERMANENT option.  The macro is removed, the
        functionality remains.

        If defined (in the perform module), this macro makes the Mute button
        of the Main window toggle only the tracks that are armed.  The
        armed status of these tracks are saved, and then turned off.  Toggling
        again turns only the armed tracks back on.  Please note that any
        tracks that are armed while the previously-armed tracks are toggled
        off will stay armed when the previously-armed tracks are toggled back
        on.  This feature currently is not a strict "restore previous state"
        button.

    USE_xxxxxx:
    SEQ64_xxxxxx_XXX:
    SEQ64_xxxxxx_TMI:

        This category of macro are usually undefined values that let us keep
        old or experimental code around in case we decide it was the better
        code after all.  Generally, you do not want to change the status of
        these macros unless you are very familiar with the code and willing to
        temporarily break stuff or add annoying console output.
        The "TMI" in some denotes debug code that dumps too much information
        (TMI) to the console, so has to be enabled by editing it on those
        occasions where you really want it.  The "XXX" is similar, disabling
        the macro no matter what.  It is more serious than "TMI" :-D.

        We have incorporated some very useful code from the Seq32 project
        of the user "stazed".  He includes some new features and some bug
        fixes that we had overlooked.  At present, we are not enabling this
        functionality, just adding it, macroed out by the following macros:

        USE_STAZED_RANDOMIZE_SUPPORT
        USE_STAZED_SEQDATA_EXTENSIONS
        USE_STAZED_SELECTION_EXTENSIONS
        USE_STAZED_EVEN_ODD_SUPPORT

        Also, the GitHub project "Kepler34" has some features we want to adopt
        before we make our version of its conversion to the Qt library.

        USE_SEQUENCE_COLOR
        USE_SEQUENCE_EDIT_MODE
        SEQ64_SONG_RECORDING

        Some of these are defined (or undefined) in
        libseq64/include/seq64_features.h.

REPORTING ISSUES:

   Should one be unfortunate enough to experience a segmentation fault
   (i.e. the infamous "crash"), here is the most complete way to diagnose the
   error, if we cannot replicate it:

        $ ./bootstrap --full-clean
        $ ./bootstrap -ed -rm
        $ make
        $ gdb ./Seq64rtmidi/seq64
        (gdb) r    [add your command-line arguments here if needed]
                   [replicate the crash]
        (gdb) bt   [does a backtrace]

    Then highlight, copy, and paste the stack trace and attach it to the bug
    report.  Might have to Page Up to see the relevant parts of the stack
    trace.

DEPENDENCIES:

   With luck, the following dependencies will bring in their own dependencies
   when installed.

   Code:

	  -  libasound2-dev
      -  libatkmm-1.6-dev (dev is the header-file package)
      -  libgtkmm-2.4-dev
      -  libglibmm-2.4-dev
	  -  libgtk2.0-dev
      -  libsigc++-2.0-dev
      -  libjack-jackd2-dev
      -  liblash-compat-dev (optional)
      -  libpng-dev (replaces libpng12-dev with libpng16, latest Debian Sid,
         and brings in libpng-tools)
      -  libportmidi-dev, needed to build the Linux PortMidi version of
         Sequencer64 (currently only for experimentation)

   Runtime:

      -  libatk-adaptor (and its dependencies)
      -  libgail-common (and its dependencies)

   Build tools:

      -  automake and autoconf
      -  autoconf-archive
      -  g++
      -  make
      -  libtool
      -  mingw Windows builds (Debian flavor)
         -  binutils-mingw-w64
         -  gcc-mingw-w64
         -  g++-mingw-w64
         -  gdb-mingw-w64 (for debugging on Linux)
         -  mingw-w64-tools (mingw32-pkgconfig on other systems)
      -  Qt 5.  We do not want to install qtcreater, as it installs 650 Mb
         worth of files.  Just install the bare minimum:
         -  qt5-default
         -  qtbase5-dev
         -  qtbase5-dev-tools
         -  qtdeclarative-dev-tools
         -  qtchooser
         -  qtdesigner; optional if you want to tweak the GUIs, not huge,
            provided by the qtttools5-dev-tools package in Debian.

         To setup Qt, first run the command "qtchooser -l".  If more than one
         version of Qt is installed, their numbers are all listed.  Make sure
         that "5" is in the list, and then add this line to your .bashrc file:

            export QT_SELECT=5

   Documentation (now optional, must be built manually):

      We have removed the automatic generation of the developer reference
      documentation.  It is a pain to deal with relative to the number of
      times one needs to read it.  To build it, change to the doc/dox
      directory and run "./make_dox reference".  There is now a shorter,
      more useful "Developer Notes" document that can be built using
      "./make_dox notes".  Be aware that the PDF files will always be present
      and installed, even if not necessarily up-to-date with the latest code.

      -  doxygen and doxygen-latex
      -  graphviz
      -  texlive
      -  More?

      To build the documentation manually, change to the doc/dox
      directory and run:

         ./make_dox reference   [ CURRENTLY BROKEN!!!!!]
         ./make_dox clean

      To install the documentation to /usr/local/doc/sequencer64-0.94:

         ./make_dox install
      
   Debian packaging:

      See the README file in the Debian directory.

      -  debhelper
      -  fakeroot
      -  More?

   MingW:

    Avoid use of AC_CYGWIN and AC_MINGW32.

    https://mail.gnome.org/archives/commits-list/2013-January/msg03009.html
    https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/Obsolete-Macros.html
    http://mingw-cross.sourceforge.net/hello_autotools.html#mingw

        https://www.tinc-vpn.org/examples/cross-compiling-windows-binary/

        https://wiki.wxwidgets.org/Compiling_wxWidgets_with_MinGW

        https://github.com/Alexpux/MINGW-packages/blob/master/mingw-w64-gimp/PKGBUILD

        https://mail.gnome.org/archives/gimp-developer-list/2016-March/msg00014.html

   JACK Testing (optional):

      - qjackctl
      - a2jmidid (exposes Seq24 ALSA MIDI ports to JACK)
      - hydrogen
      - klick (a command-line metronome)
      - qtractor or other MIDI sequencers
      - gmidimonitor or (better) midisnoop

# vim: sw=4 ts=4 wm=4 et ft=sh
